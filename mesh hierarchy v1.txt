hierarchy.jsx 

import React, { useState, useEffect, useRef } from 'react';
import { useThree } from '@react-three/fiber';
import ReactDOM from 'react-dom/client';
import MeshSelection from './meshselection';

const HierarchyItem = ({ name, children, onClick, isSelected }) => {
  const [isCollapsed, setIsCollapsed] = useState(true);

  return (
    <div>
      <button
        onClick={() => setIsCollapsed(!isCollapsed)}
        style={{
          display: 'block',
          backgroundColor: isSelected ? '#d3d3d3' : 'transparent',
        }}
      >
        {name}
      </button>
      {!isCollapsed && <div style={{ paddingLeft: '20px' }}>{children}</div>}
      <button
        onClick={onClick}
        style={{
          display: 'block',
          marginLeft: '10px',
          backgroundColor: isSelected ? '#d3d3d3' : 'transparent',
        }}
      >
        Select
      </button>
    </div>
  );
};

const Hierarchy = () => {
  const { scene } = useThree();
  const [hierarchy, setHierarchy] = useState([]);
  const [selectedObject, setSelectedObject] = useState(null);

  useEffect(() => {
    if (!scene) return;

    const buildHierarchy = (object, depth = 0) => {
      let children = [];
      object.children.forEach((child) => {
        children.push(buildHierarchy(child, depth + 1));
      });

      return (
        <HierarchyItem
          key={object.uuid}
          name={object.name || object.type}
          onClick={() => setSelectedObject(object)}
          isSelected={selectedObject === object}
        >
          {children}
        </HierarchyItem>
      );
    };

    const onChange = () => {
      const hierarchyStructure = buildHierarchy(scene);
      setHierarchy(hierarchyStructure);
    };
    scene.addEventListener('change', onChange);
    onChange();

    const hierarchyStructure = buildHierarchy(scene);
    setHierarchy(hierarchyStructure);

    // Find the sidebar container
    const sidebarContainer = document.getElementById('sidebar');
    if (sidebarContainer) {
      const root = ReactDOM.createRoot(sidebarContainer);
      root.render(hierarchyStructure);
    } else {
      console.log('Sidebar container not found');
    }

    return () => {
      scene.removeEventListener('change', onChange);
    };
  }, [scene, selectedObject]);

  return <MeshSelection selectedObject={selectedObject} />;
};

export default Hierarchy;




App.jsx

import React, { useState } from 'react';
import { Canvas } from '@react-three/fiber';
import { OrbitControls } from '@react-three/drei';
import Scene from './scene';
import { importModel } from './Import';
import './App.css';
import Stats from './stats';


export default function App() {
  const [importedScenes, setImportedScenes] = useState([]);

  const handleImport = (file) => {
    importModel(file, (importedScene) => {
      setImportedScenes(prevScenes => [...prevScenes, importedScene]);
    });
  };

  const handleFileChange = (event) => {
    const file = event.target.files[0];
    if (file) {
      handleImport(file);
    }
  };

  return (
    <div className='scene'>
      <div className='sidebar' id='sidebar'>
        <h1>Sidebar</h1>
      </div>

      <div className='viewport'>
        <input 
          type="file" 
          onChange={handleFileChange} 
          accept=".glb, .gltf"
        />
        
        <Canvas camera={{ position: [2, 2, 2] }}>
          <ambientLight intensity={0.1} />
          <directionalLight color="red" position={[0, 0, 5]} />
          {importedScenes.map((scene, index) => (
            <Scene key={index} importedScene={scene} />
          ))}
          <OrbitControls />
        </Canvas>
      </div>
    </div>
  );
}



meshselection.jsx 

import React, { useState, useEffect, useRef } from 'react';
import { extend, useThree, useFrame } from '@react-three/fiber';
import { OutlinePass } from 'three/examples/jsm/postprocessing/OutlinePass';
import { EffectComposer } from 'three/examples/jsm/postprocessing/EffectComposer';
import { RenderPass } from 'three/examples/jsm/postprocessing/RenderPass';
import { Clock } from 'three';
extend({ EffectComposer, RenderPass, OutlinePass });

const MeshSelection = ({ selectedObject }) => {
  const { scene, camera, gl, size } = useThree();
  const [composer] = useState(() => new EffectComposer(gl));
  const [outlinePass] = useState(() => new OutlinePass(size, scene, camera));
  const hoveredObjectRef = useRef(null);
  const clock = new Clock();

  useEffect(() => {
    const renderPass = new RenderPass(scene, camera);
    composer.addPass(renderPass);
    composer.addPass(outlinePass);
  }, [composer, scene, camera]);

  useEffect(() => {
    outlinePass.visibleEdgeColor.set(selectedObject ? '#ffff00' : '#ff0000');
    outlinePass.edgeGlow = 2;
    outlinePass.edgeThickness = 3;
    outlinePass.selectedObjects = selectedObject ? [selectedObject] : [];
  }, [outlinePass, selectedObject]);

  useFrame(() => {
    composer.render();
  }, 1);

  useFrame(({ raycaster, mouse }) => {
    // Throttle raycasting to every 100ms
    if (clock.getElapsedTime() > 0.5) {
      clock.start();
      raycaster.setFromCamera(mouse, camera);
      const intersects = raycaster.intersectObjects(scene.children, true);

      if (intersects.length > 0) {
        const selected = intersects[0].object;
        if (selected !== hoveredObjectRef.current) {
          hoveredObjectRef.current = selected;
          outlinePass.selectedObjects = selectedObject === selected ? [] : [selected];
        }
      } else if (hoveredObjectRef.current) {
        hoveredObjectRef.current = null;
        outlinePass.selectedObjects = selectedObject ? [selectedObject] : [];
      }
    }
  });

  return null;
};

export default MeshSelection;



index.css

:root {
  font-family: Inter, system-ui, Avenir, Helvetica, Arial, sans-serif;
  line-height: 1.5;
  font-weight: 400;

  color-scheme: light dark;
  color: rgba(255, 255, 255, 0.87);
  background-color: #242424;

  font-synthesis: none;
  text-rendering: optimizeLegibility;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

a {
  font-weight: 500;
  color: #646cff;
  text-decoration: inherit;
}
a:hover {
  color: #535bf2;
}

body {
  margin: 0;
  display: flex;
  place-items: center;
  min-width: 320px;
  min-height: 100vh;
}

h1 {
  font-size: 3.2em;
  line-height: 1.1;
}

button {
  border-radius: 8px;
  border: 1px solid transparent;
  padding: 0.6em 1.2em;
  font-size: 1em;
  font-weight: 500;
  font-family: inherit;
  background-color: #1a1a1a;
  cursor: pointer;
  transition: border-color 0.25s;
}
button:hover {
  border-color: #646cff;
}
button:focus,
button:focus-visible {
  outline: 4px auto -webkit-focus-ring-color;
}

@media (prefers-color-scheme: light) {
  :root {
    color: #213547;
    background-color: #ffffff;
  }
  a:hover {
    color: #747bff;
  }
  button {
    background-color: #f9f9f9;
  }
}




Model.jsx 

import React from 'react';
import MeshSelection from "./meshselection";
import Hierarchy from "./Hierarchy";
import Model from "./Model";

export default function Scene({ importedScene }) {
  return (
    <>
      <MeshSelection />
      <Hierarchy />
      <Model importedScene={importedScene} />
      <mesh position={[0, 0, 3]} name="Box1">   
        <boxGeometry args={[1, 1, 1]} />
        <meshBasicMaterial color='grey' />
      </mesh>
    </>
  );
}




App.css

* {
  box-sizing: border-box;
}

html,
body,
#root {
  width: 100%;
  height: 100%;
  margin: 0;
  padding: 0;
  -webkit-touch-callout: none;
  -webkit-user-select: none;
  -khtml-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;
  overflow: hidden;
}

#root {
  overflow: hidden;
}

body {
  position: fixed;
  overflow: hidden;
  overscroll-behavior-y: none;
  font-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, helvetica neue, helvetica, ubuntu, roboto, noto, segoe ui, arial, sans-serif;
  color: black;
  -webkit-font-smoothing: antialiased;
  background: #f0f0f0;
}

.scene{
  width:100vw;
  height:100vh;
  display:flex;
}


.sidebar{
  width: 10%;
  height: 100%;
  background: #000000;
  border-right: 1px solid #e0e0e0;
  display: flex;
  flex-direction: column;
  justify-content: space-between;
  overflow-y: auto;
  overflow-x: auto;
}

.viewport{
  width: 80%;
  height: 100%;
  background: #f0f0f0;
  display: flex;
  flex-direction: column;
  justify-content: space-between;
}



stats.jsx 

import React, { useEffect, useState } from 'react';
import { useThree } from '@react-three/fiber';

const Stats = () => {
  const { scene } = useThree();
  const [stats, setStats] = useState({
    cones: 0,
    polygons: 0,
    other: 0,
  });

  const countGeometries = (object) => {
    let cones = 0;
    let polygons = 0;
    let other = 0;

    object.traverse((child) => {
      if (child.isMesh) {
        if (child.geometry.type === 'ConeGeometry') {
          cones += 1;
        } else if (child.geometry.type === 'PolyhedronGeometry') {
          polygons += 1;
        } else {
          other += 1;
        }
      }
    });

    return { cones, polygons, other };
  };

  useEffect(() => {
    if (!scene) return;

    const updateStats = () => {
      const { cones, polygons, other } = countGeometries(scene);
      setStats({ cones, polygons, other });
    };

    scene.addEventListener('change', updateStats);
    updateStats();

    return () => {
      scene.removeEventListener('change', updateStats);
    };
  }, [scene]);

  return (
    <div className="stats">
      <h2>Model Statistics</h2>
      <p>Cones: {stats.cones}</p>
      <p>Polygons: {stats.polygons}</p>
      <p>Other: {stats.other}</p>
    </div>
  );
};

export default Stats;




import.jsx 

import { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader';

export const importModel = (file, onImport) => {
    const reader = new FileReader();
  
    reader.onload = (e) => {
      const contents = e.target.result;  // The contents of the file read as ArrayBuffer
      const loader = new GLTFLoader();
  
      loader.parse(contents, '', (gltf) => {
        onImport(gltf.scene);  // Callback to handle the imported scene
        gltf.scene.dispatchEvent({ type: 'change' });  // Dispatch a 'change' event on the imported scene
      }, undefined, (error) => {
        console.error('Error loading model:', error);  // Error handling
      });
    };
  
    reader.readAsArrayBuffer(file);  // Initiates reading of the file
  };
  
